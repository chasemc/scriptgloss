% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/code-deshine-callstack.R
\name{purge_shiny_code}
\alias{purge_shiny_code}
\title{Remove shiny-specific code from callstack}
\usage{
purge_shiny_code(x)
}
\arguments{
\item{x}{a call, or expression to strip of shiny-specific functions}
}
\value{
the same call or expression, with shiny runtime-specific
  functionality stripped and replaced with code that will evaluate within an
  R script.
}
\description{
walk an expression, call or list, replacing canonical shiny
  server functions with R script equivalent code.
}
\note{
specifically, a few shiny functions built around a reactive javascript
  context are reconstructed as base R functions:
  \itemize{
  \item{\code{my_reactive_value <- reactive({ ... })} will become
        \code{my_reactive_value <- function() { ... }}}
  \item{All shiny render functions
        (\code{output$my_output <- render*({ ... })}) will become
        \code{output$my_output <- function() { ... }}}
  \item{calls to \code{observeEvent()} becomes \code{NULL}}
  \item{calls to \code{observe()} becomes \code{NULL}}
  }
}
\examples{
library(shiny)

code <- quote({
  output$plot <- renderPlot({
    plot(x = mtcars[[input$x]],
         y = mtcars[[input$y]])
  })
  observeEvent(input$give_me_a_happy_message, {
    "you're a great person!"
  })
  output$code <- renderPrint({
    generate_static_code(srv, 'plot')
  })
})

scriptgloss:::purge_shiny_code(code)

}
