% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny-ui-show-code.R
\name{show_code_modal}
\alias{show_code_modal}
\title{Display independent code in modal dialog}
\usage{
show_code_modal(server, ..., title = "R Code", id = "modal_clipboardjs_btn",
  envir = parent.frame(), code = get_code(server, ..., call_outputs = TRUE,
  envir = envir))
}
\arguments{
\item{server}{The server function handle for construction of code}

\item{...}{Any outputs for which code should be constructed. If none are
passed, all code is produced.}

\item{title}{Title of the code modal}

\item{id}{css id of the code modal}

\item{envir}{environment for collecting code artifacts}

\item{code}{code used to generate output can be passed directly as an
alternative to the server, ellipses and envir arguments}
}
\value{
a shiny modalDialog with copy to clipboard button and code necessary
  to generate outputs in server function
}
\description{
uses javascript libraries, PrismJS and ClipboardJS to highlight
  code and handle copying of code to clipboard respectively. Dependencies
  must be loaded in the module header. Helper functions
  \code{\link{prismDependencies}} and \code{\link{clipboardjsDependencies}}
  included to streamline loading from content distribution network.
}
\examples{
\dontrun{
library(shiny)

ui <- fluidPage(
  scriptglossJS(),
  selectInput('x', 'x axis', choices = names(mtcars)),
  selectInput('y', 'y axis', choices = names(mtcars)),
  actionButton("show_code", "Show R Code", icon("code")),
  plotOutput('plot')
)

srv <- function(input, output, session) {
  internal_data <- mtcars
  output$plot <- renderPlot({
    plot(
      x = internal_data[[input$x]],
      y = internal_data[[input$y]],
      xlab = input$x,
      ylab = input$y)
  })
  observeEvent(input$show_code, show_code_modal(srv, 'plot'))
}

shinyApp(ui, srv)
}

}
