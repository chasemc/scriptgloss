% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/code-generate-static-code.R
\name{generate_static_code}
\alias{generate_static_code}
\title{Generate R code from shiny server code}
\usage{
generate_static_code(server, ..., dots = list(), call_outputs = TRUE,
  flatten_outputs = TRUE, files = file.path(getwd(), c("app.R",
  "global.R")), envir = parent.frame())
}
\arguments{
\item{server}{the server function to generate an R script for}

\item{...}{names of output names for which to build code}

\item{dots}{optionally pass ellipses names of outputs as list}

\item{call_outputs}{whether calls to the specified outputs should be appended
at the end of the script}

\item{flatten_outputs}{whether a singular output should be collapsed into
parent script}

\item{files}{the filepaths to search for available shiny globally scoped code}

\item{envir}{the environment in which to search for arguments originally
passed to the server function. A construction of those arguments as they
exist in the current state will attempt to be built into the generated
script.}
}
\value{
a script representing the current state of the shiny app, allowing
  for independent reproduction of the shiny outputs.
}
\description{
Takes in a shiny server function, searches working directory for
  \code{app.R} and \code{global.R} files, and reconstructs an independent R
  script from the server components.
}
\examples{
\dontrun{
## Shiny Example (app.R contents)
try(setwd(dirname(rstudioapi::getActiveDocumentContext()$path)), silent = TRUE) # R Studio
try(setwd(dirname(dirname(parent.frame(2)$ofile))), silent = TRUE) # running as a script

library(shiny)

my_data <- datasets::mtcars

# additional code before shinyApp call will be captured if in app.R
ui <- fluidPage(
  selectInput('x', 'x axis', choices = names(my_data)),
  selectInput('y', 'y axis', choices = names(my_data)),
  plotOutput('plot'),
  verbatimTextOutput('code')
)

srv <- function(input, output, session) {
  output$plot <- renderPlot({
    plot(x = my_data[[input$x]],
         y = my_data[[input$y]])
  })
  output$code <- renderPrint({
    cat(get_code(srv, 'plot'))
  })
}

shinyApp(ui, srv)
}

}
